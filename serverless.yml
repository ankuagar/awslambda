# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-serverless-tutorial
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements

custom:
    pythonRequirements:
      dockerizePip: true

package:
  exclude:
    - ./**
  include:
    - src/**

provider:
  name: aws
  runtime: python3.7
  profile: default
  region: us-west-2
  accountid: ${env:accountid}
  stage: ${opt:stage}
  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds


# you can overwrite defaults here

# service wide environment variables
  environment:
    service_wide_env_variable: service-wide-env-variable-value


# you can add statements to the Lambda function's IAM Role here

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #     - logs:*
  #     Resource:
  #       - arn:aws:logs:${self:provider.region}:${self:provider.accountid}:*:*

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  lambda-that-simply-sleeps:
    handler: src/handler.lambda2
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit
    environment: # Function level environment variable
      lambda_that_simply_sleeps_env_variable: lambda-that-simply-sleeps-env-variable-value
    events:
         - schedule:
             name: schedule-event-for-lambda
             description: 1 minute rate scheduler
             rate: rate(1 minute) #Different units are required for values of 1, such as minute, and values over 1, such as minutes.
             enabled: true
             input: # Note, you can use only one of input, inputPath, or inputTransformer
                key1: value1
                key2: value2

  my-simple-lambda-function:
    handler: src/handler.lambda1
    name: ${self:service}-${self:provider.stage}-my-simple-lambda-function-name # optional, Deployed Lambda name
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit
    # use 'aws lambda get-account-settings --region us-west-2' to get concurrency limit for your account
    # use 'aws lambda get-function --region us-west-2 --function-name lambda-serverless-tutorial-test-my-simple-lambda-function' to get
    # concurrency limit for your account
    environment: # Function level environment variable
      my_simple_lambda_function_env_variable: my-simple-lambda-function-env-variable-value
    events:
        # - schedule:
        #   name: my-schedule-event
        #   description: a description of my scheduled event's purpose
        #   rate: rate(2 minutes)
        #   enabled: true
        #   # Note, you can use only one of input, inputPath, or inputTransformer
        #   input:
        #     key1: value1
        #     key2: value2
         - http:
             path: users/getep # to hit the get endpoint use: curl -v -X GET
             method: get
         - http: GET getendpoint # path getendpoint for GET request (different syntax). to hit the get endpoint use: curl -v -X GET
         - http:
             path: users/postep # to hit the post endpoint use: curl -v -X POST
             method: post
         - http: POST postendpoint # path postendpoint for POST request (different syntax). to hit the post endpoint use: curl -v -X POST 'post-url'
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
